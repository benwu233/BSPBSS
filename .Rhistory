th = quantile(maxX,thres[1])
th2 = quantile(maxX,thres[2])
ind2 = (maxX>=th)
ind3 = (maxX<th2)
stdX = X[,ind2] - apply(X[,ind2],1,mean)
var0 = mean( apply(stdX,1,var) ) - mean( apply(X[,ind3],1,var) )
#noise0 = var(as.numeric(X[,maxX<th2]) )/nrow(X)
#var0 = (var(as.numeric(X) ) - var(as.numeric(X[,maxX<th2])) )/nrow(X)
distMat1 = round( disM_full(xgrid1[ind2,]),10)
distMat_tri = distMat1[upper.tri(distMat1,diag=TRUE)]
uniqueM = unique(as.numeric(distMat_tri) )
uniqueM_sorted = sort(uniqueM)
ind1 = match(distMat_tri,uniqueM_sorted)
sampcov = samp_cov(X[,ind2],xgrid1[ind2,], ind1-1, length(uniqueM_sorted))
sampcov = sampcov/sampcov[uniqueM==0]
xgrid0 = GP.std.grids(xgrid,center=apply(xgrid,2,mean),scale=NULL,max_range=1)
xgrid1 = xgrid0[mask==1,]
maxX = apply(abs(X),2,max)
th = quantile(maxX,thres[1])
th2 = quantile(maxX,thres[2])
ind2 = (maxX>=th)
ind3 = (maxX<th2)
stdX = X[,ind2] - apply(X[,ind2],1,mean)
var0 = mean( apply(stdX,1,var) ) - mean( apply(X[,ind3],1,var) )
distMat1 = round( disM_full(xgrid1[ind2,]),10)
sourceCpp("/Users/ben/desktop/Rpackage/BSPBSS/src/Rcpp.cpp")
distMat1 = round( disM_full(xgrid1[ind2,]),10)
distMat_tri = distMat1[upper.tri(distMat1,diag=TRUE)]
uniqueM = unique(as.numeric(distMat_tri) )
uniqueM_sorted = sort(uniqueM)
ind1 = match(distMat_tri,uniqueM_sorted)
sampcov = samp_cov(X[,ind2],xgrid1[ind2,], ind1-1, length(uniqueM_sorted))
sampcov = sampcov/sampcov[uniqueM==0]
sampcov
thr = uniqueM_sorted[2]*25
ind3 = which( (uniqueM<=thr)&(uniqueM>0) )
para_est = optim(c(1,1),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2),upper = c(1e3,1e3))
para_est
thr = uniqueM_sorted[2]*100
ind3 = which( (uniqueM<=thr)&(uniqueM>0) )
para_est = optim(c(1,1),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2),upper = c(1e3,1e3))
para_est
ind3
sampcov = samp_cov(X[,ind2],xgrid1[ind2,], ind1-1, length(uniqueM_sorted))
sampcov = sampcov/var0
sampcov[1]
sampcov[2]
sampcov[3]
fn3 = function(para,sampcov,dist0){
rho = para[1]
nu = para[2]
sig = para[3]
n = length(sampcov)
out = 0
for(i in 1:n){
out = out + (sampcov[i] - sig* matern(dist0[i]/rho,nu))^2/n
}
return(out)
}
sampcov = samp_cov(X[,ind2],xgrid1[ind2,], ind1-1, length(uniqueM_sorted))
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-2),upper = c(1e3,1e3,1e3))
para_est
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e3))
para_est
thr = uniqueM_sorted[2]*25
ind3 = which( (uniqueM<=thr)&(uniqueM>0) )
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e3))
para_est
X = degree_weighted
xgrid =  coord
mask = (mask1>0)
q=10
thres=c(0.9,0.1)
xgrid0 = GP.std.grids(xgrid,center=apply(xgrid,2,mean),scale=NULL,max_range=1)
xgrid1 = xgrid0[mask==1,]
maxX = apply(abs(X),2,max)
th = quantile(maxX,thres[1])
th2 = quantile(maxX,thres[2])
ind2 = (maxX>=th)
ind3 = (maxX<th2)
stdX = X[,ind2] - apply(X[,ind2],1,mean)
var0 = mean( apply(stdX,1,var) ) - mean( apply(X[,ind3],1,var) )
distMat1 = round( disM_full(xgrid1[ind2,]),10)
distMat_tri = distMat1[upper.tri(distMat1,diag=TRUE)]
uniqueM = unique(as.numeric(distMat_tri) )
uniqueM_sorted = sort(uniqueM)
ind1 = match(distMat_tri,uniqueM_sorted)
sampcov = samp_cov(X[,ind2],xgrid1[ind2,], ind1-1, length(uniqueM_sorted))
thr = uniqueM_sorted[2]*25
ind3 = which( (uniqueM<=thr)&(uniqueM>0) )
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e3))
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
thr = uniqueM_sorted[2]*9
ind3 = which( (uniqueM<=thr)&(uniqueM>0) )
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
fn3 = function(para,sampcov,dist0){
rho = para[1]
nu = para[2]
sig = para[3]
n = length(sampcov)
out = 0
for(i in 1:n){
out = out + (sampcov[i] - sig* matern(dist0[i]/rho,nu))^2/n/1000
}
return(out)
}
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
fn3 = function(para,sampcov,dist0){
rho = para[1]
nu = para[2]
sig = para[3]
n = length(sampcov)
out = 0
for(i in 1:n){
out = out + (sampcov[i]/sig -  matern(dist0[i]/rho,nu))^2/n/1000
}
return(out)
}
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
para_est
thr = uniqueM_sorted[2]*25
ind3 = which( (uniqueM<=thr)&(uniqueM>0) )
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
leng(ind23)
leng(ind3)
length(ind3)
ind3
para_est = optim(c(1,1,1e10),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
para_est
para_est = optim(c(1,1,sqrt(var0) ),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
sqrt(var0)
var0
para_est = optim(c(1,1,1e8 ),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
para_est
fn3 = function(para,sampcov,dist0){
rho = para[1]
nu = para[2]
sig = para[3]
n = length(sampcov)
out = 0
for(i in 1:n){
out = out + (sampcov[i]/sig -  matern(dist0[i]/rho,nu))^2/n
}
return(out)
}
para_est = optim(c(1,1,1e8 ),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
para_est
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
para_est = optim(c(1,1,var0),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
para_est = optim(c(100,1,var0),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
thr = uniqueM_sorted[2]*64
ind3 = which( (uniqueM<=thr)&(uniqueM>0) )
para_est = optim(c(1,1,var0),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
thr = uniqueM_sorted[2]*9
ind3 = which( (uniqueM<=thr)&(uniqueM>0) )
para_est = optim(c(1,1,var0),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
thr = uniqueM_sorted[2]*100
ind3 = which( (uniqueM<=thr)&(uniqueM>0) )
para_est = optim(c(1,1,var0),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
?optim
para_est = optim(c(1,1,var0),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
fn3 = function(para,sampcov,dist0){
rho = para[1]
nu = para[2]
sigma = para[3]
n = length(sampcov)
out = 0
for(i in 1:n){
out = out + (sampcov[i]/sigma -  matern(dist0[i]/rho,nu))^2/n/1000000
}
return(out)
}
para_est = optim(c(1,1,var0),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
para_est
fn3 = function(para,sampcov,dist0){
rho = para[1]
nu = para[2]
sigma = para[3]
n = length(sampcov)
out = 0
for(i in 1:n){
out = out + (sampcov[i]/sigma -  matern(dist0[i]/rho,nu))^2/n/1000
}
return(out)
}
para_est = optim(c(1,1,var0),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
thr = uniqueM_sorted[2]*25
ind3 = which( (uniqueM<=thr)&(uniqueM>0) )
para_est = optim(c(1,1,var0),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
return(para_est$par)
sampcov[ind3]
sampcov
ind3
sampcov[1:5]
para_est = optim(c(1,1,2427799[1]),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
para_est
para_est = optim(c(1,1,var0),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
fn3 = function(para,sampcov,dist0){
rho = para[1]
nu = para[2]
sigma = para[3]
n = length(sampcov)
out = 0
for(i in 1:n){
out = out + (sampcov[i]/sigma -  matern(dist0[i]/rho,nu))^2/n
}
return(out)
}
para_est = optim(c(1,1,var0),fn3,gr = NULL, sampcov[ind3],uniqueM[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
para_est = optim(c(1,1,var0),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
thr = uniqueM_sorted[2]*9
ind3 = which( (uniqueM<=thr)&(uniqueM>0) )
para_est = optim(c(1,1,var0),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
thr = uniqueM_sorted[2]*9
ind3 = which( (uniqueM<=thr)&(uniqueM>0) )
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
thr = uniqueM_sorted[2]*25
ind3 = which( (uniqueM<=thr)&(uniqueM>0) )
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
fn3 = function(para,sampcov,dist0){
rho = para[1]
nu = para[2]
sigma = para[3]
n = length(sampcov)
out = 0
for(i in 1:n){
out = out + (sampcov[i]/sigma -  matern(dist0[i]/rho,nu))^2/n/1000
}
return(out)
}
para_est = optim(c(1,1,var0),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
thr = uniqueM_sorted[2]*25
ind3 = which( (uniqueM<=thr)&(uniqueM>0) )
para_est = optim(c(1,1,var0),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
ind3
ind3 = which( (uniqueM_sorted<=thr)&(uniqueM_sorted>0) )
para_est = optim(c(1,1,var0),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
ind3
para_est = optim(c(10,10,var0),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
para_est
var0
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
fn3 = function(para,sampcov,dist0){
rho = para[1]
nu = para[2]
sigma = para[3]
n = length(sampcov)
out = 0
for(i in 1:n){
out = out + (sampcov[i]/sigma -  matern(dist0[i]/rho,nu))^2/n/1000
if(out > 1e10){
break
}
}
return(out)
}
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e20))
fn3 = function(para,sampcov,dist0){
rho = para[1]
nu = para[2]
sigma = para[3]
n = length(sampcov)
out = 0
for(i in 1:n){
out = out + (sampcov[i]/sigma -  matern(dist0[i]/rho,nu))^2
}
return(out)
}
fn3(c(1,1,1),sampcov[ind3],uniqueM_sorted[ind3])
fn3(c(1e-2,1e-2,1e-10),sampcov[ind3],uniqueM_sorted[ind3])
fn3(c(1e3,1e3,1e20),sampcov[ind3],uniqueM_sorted[ind3])
fn3(c(1e3,1e3,1e10),sampcov[ind3],uniqueM_sorted[ind3])
fn3(c(1e3,1e3,1e5),sampcov[ind3],uniqueM_sorted[ind3])
fn3(c(1e2,1e2,1e5),sampcov[ind3],uniqueM_sorted[ind3])
fn3(c(1e2,1e2,1e10),sampcov[ind3],uniqueM_sorted[ind3])
fn3(c(1e2,1e2,1e1),sampcov[ind3],uniqueM_sorted[ind3])
fn3(c(1e1,1e1,1e5),sampcov[ind3],uniqueM_sorted[ind3])
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e1,1e1,1e10))
para_est
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e1,1e1,1e5))
para_est
#sampcov = sampcov/sampcov[uniqueM==0]
sampcov = sampcov/var0
fn3 = function(para,sampcov,dist0){
rho = para[1]
nu = para[2]
#sigma = para[3]
n = length(sampcov)
out = 0
for(i in 1:n){
out = out + (sampcov[i] -  matern(dist0[i]/rho,nu))^2
}
return(out)
}
para_est = optim(c(1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2),upper = c(1e3,1e3))
para_est
thr = uniqueM_sorted[2]*25
ind3 = which( (uniqueM_sorted<=thr)&(uniqueM_sorted>0) )
para_est = optim(c(1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2),upper = c(1e3,1e3))
para_est
sampcov[1]
sampcov = sampcov /3
para_est = optim(c(1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2),upper = c(1e3,1e3))
para_est
fn3 = function(para,sampcov,dist0){
rho = para[1]
nu = para[2]
sigma = para[3]
n = length(sampcov)
out = 0
for(i in 1:n){
out = out + (sampcov[i]/sigma -  matern(dist0[i]/rho,nu))^2
}
return(out)
}
X_list = readRDS("/Users/ben/Desktop/work2/GaussianProcess/sim_kernel2/Xlist5e4s0.rds")
X = X_list[[1]]$X
xgrid = X_list[[1]]$xgrid
q = 3
thres = c(0.7,0.3)
mask = rep(1,nrow(xgrid))
xgrid0 = GP.std.grids(xgrid,center=apply(xgrid,2,mean),scale=NULL,max_range=1)
xgrid1 = xgrid0[mask==1,]
maxX = apply(abs(X),2,max)
th = quantile(maxX,thres[1])
th2 = quantile(maxX,thres[2])
ind2 = (maxX>=th)
ind3 = (maxX<th2)
stdX = X[,ind2] - apply(X[,ind2],1,mean)
var0 = mean( apply(stdX,1,var) ) - mean( apply(X[,ind3],1,var) )
distMat1 = round( disM_full(xgrid1[ind2,]),10)
distMat_tri = distMat1[upper.tri(distMat1,diag=TRUE)]
uniqueM = unique(as.numeric(distMat_tri) )
uniqueM_sorted = sort(uniqueM)
ind1 = match(distMat_tri,uniqueM_sorted)
sampcov = samp_cov(X[,ind2],xgrid1[ind2,], ind1-1, length(uniqueM_sorted))
thr = uniqueM_sorted[2]*25
ind3 = which( (uniqueM_sorted<=thr)&(uniqueM_sorted>0) )
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-2,1e-2,1e-10),upper = c(1e3,1e3,1e10))
para_est
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-3,1e-3,1e-10),upper = c(1e3,1e3,1e10))
para_est
ind1
sampcov = samp_cov(stdX,xgrid1[ind2,], ind1-1, length(uniqueM_sorted))
thr = uniqueM_sorted[2]*25
ind3 = which( (uniqueM_sorted<=thr)&(uniqueM_sorted>0) )
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-3,1e-3,1e-10),upper = c(1e3,1e3,1e10))
para_est
thr = uniqueM_sorted[2]*25
ind3 = which( (uniqueM_sorted<=thr)&(uniqueM_sorted>0) )
ind1
table(ind1)
uniqueM_sorted[1:5]
distMat1 = round( disM_full(xgrid1[ind2,]),20)
distMat_tri = distMat1[upper.tri(distMat1,diag=TRUE)]
uniqueM = unique(as.numeric(distMat_tri) )
uniqueM_sorted = sort(uniqueM)
ind1 = match(distMat_tri,uniqueM_sorted)
table(ind1)
distMat1 = round( disM_full(xgrid1[ind2,]),10)
distMat_tri = distMat1[upper.tri(distMat1,diag=TRUE)]
uniqueM = unique(as.numeric(distMat_tri) )
uniqueM_sorted = sort(uniqueM)
ind1 = match(distMat_tri,uniqueM_sorted)
sampcov = samp_cov(stdX,xgrid1[ind2,], ind1-1, length(uniqueM_sorted))
thr = uniqueM_sorted[2]*25
ind3 = which( (uniqueM_sorted<=thr)&(uniqueM_sorted>0) )
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-3,1e-3,1e-10),upper = c(1e3,1e3,1e10))
para_est
#sampcov = sampcov/sampcov[uniqueM==0]
sampcov = sampcov/var0
fn3 = function(para,sampcov,dist0){
rho = para[1]
nu = para[2]
sigma = para[3]
n = length(sampcov)
out = 0
for(i in 1:n){
out = out + (sampcov[i] -  matern(dist0[i]/rho,nu))^2
}
return(out)
}
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-3,1e-3,1e-10),upper = c(1e3,1e3,1e10))
para_est
thr = uniqueM_sorted[2]*100
ind3 = which( (uniqueM_sorted<=thr)&(uniqueM_sorted>0) )
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-3,1e-3,1e-10),upper = c(1e3,1e3,1e10))
para_est
X = degree_weighted
xgrid =  coord
mask = (mask1>0)
q=10
thres=c(0.9,0.1)
xgrid0 = GP.std.grids(xgrid,center=apply(xgrid,2,mean),scale=NULL,max_range=1)
xgrid1 = xgrid0[mask==1,]
maxX = apply(abs(X),2,max)
th = quantile(maxX,thres[1])
th2 = quantile(maxX,thres[2])
ind2 = (maxX>=th)
ind3 = (maxX<th2)
stdX = X[,ind2] - apply(X[,ind2],1,mean)
var0 = mean( apply(stdX,1,var) ) - mean( apply(X[,ind3],1,var) )
distMat1 = round( disM_full(xgrid1[ind2,]),10)
distMat_tri = distMat1[upper.tri(distMat1,diag=TRUE)]
uniqueM = unique(as.numeric(distMat_tri) )
uniqueM_sorted = sort(uniqueM)
ind1 = match(distMat_tri,uniqueM_sorted)
sampcov = samp_cov(stdX,xgrid1[ind2,], ind1-1, length(uniqueM_sorted))
#sampcov = sampcov/sampcov[uniqueM==0]
sampcov = sampcov/var0
thr = uniqueM_sorted[2]*25
ind3 = which( (uniqueM_sorted<=thr)&(uniqueM_sorted>0) )
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-3,1e-3,1e-10),upper = c(1e3,1e3,1e10))
para_est
sampcov[1]
sampcov[1:10]
fn3 = function(para,sampcov,dist0){
rho = para[1]
nu = para[2]
sigma = para[3]
n = length(sampcov)
out = 0
for(i in 1:n){
out = out + (sampcov[i] -  sigma*matern(dist0[i]/rho,nu))^2
}
return(out)
}
#sampcov = sampcov /3
sampcov = sampcov * var0
thr = uniqueM_sorted[2]*25
ind3 = which( (uniqueM_sorted<=thr)&(uniqueM_sorted>0) )
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-3,1e-3,1e-10),upper = c(1e3,1e3,1e10))
fn3 = function(para,sampcov,dist0){
rho = para[1]
nu = para[2]
sigma = para[3]
n = length(sampcov)
out = 0
for(i in 1:n){
out = out + (sampcov[i] /sigma-  matern(dist0[i]/rho,nu))^2
}
return(out)
}
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-3,1e-3,1e-10),upper = c(1e3,1e3,1e10))
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-3,1e-3,1e-10),upper = c(1e2,1e2,1e10))
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-3,1e-3,1e-10),upper = c(1e1,1e1,1e10))
para_est
5.896860e+05
var0
#sampcov = sampcov/sampcov[uniqueM==0]
sampcov = sampcov/var0
fn3 = function(para,sampcov,dist0){
rho = para[1]
nu = para[2]
sigma = para[3]
n = length(sampcov)
out = 0
for(i in 1:n){
out = out + (sampcov[i] -  matern(dist0[i]/rho,nu))^2
}
return(out)
}
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-3,1e-3,1e-10),upper = c(1e1,1e1,1e10))
para_est = optim(c(1,1,1),fn3,gr = NULL, sampcov[ind3],uniqueM_sorted[ind3],method = "L-BFGS-B", lower = c(1e-3,1e-3,1e-10),upper = c(1e2,1e2,1e10))
para_est
library(MCMCpack)
rdirichlet(1,c(0.5,0.5))
rdirichlet(1,c(0.5,0.5,0.5))
rdirichlet(1,c(0.52,0.2,0.2))
rdirichlet(1,c(0.2,0.2,0.2))
rdirichlet(1,c(0.2,0.2,0.2))
rdirichlet(1,c(0.2,0.2,0.2))
rdirichlet(1,c(0.2,0.2,0.2))
rdirichlet(1,c(0.2,0.2,0.2))
rdirichlet(1,c(0.2,0.2,0.2))
sourceCpp("/Users/ben/desktop/Rpackage/BSPBSS/src/Rcpp.cpp")
sourceCpp("/Users/ben/desktop/Rpackage/BSPBSS/src/Rcpp.cpp")
sourceCpp("/Users/ben/desktop/Rpackage/BSPBSS/src/Rcpp.cpp")
sourceCpp("/Users/ben/desktop/Rpackage/BSPBSS/src/Rcpp.cpp")
sourceCpp("/Users/ben/desktop/Rpackage/BSPBSS/src/Rcpp.cpp")
sourceCpp("/Users/ben/desktop/Rpackage/BSPBSS/src/Rcpp.cpp")
sourceCpp("/Users/ben/desktop/Rpackage/BSPBSS/src/Rcpp.cpp")
library(Rcpp)
library(RcppArmadillo)
sourceCpp("/Users/ben/desktop/Rpackage/BSPBSS/src/Rcpp.cpp")
library(Rcpp)
library(RcppArmadillo)
sourceCpp("/Users/ben/desktop/Rpackage/BSPBSS/src/Rcpp.cpp")
install.packages("BH")
Rsession()
session()
library(BSPBSS)
library(BSPBSS)
library(ica)
library(oro.nifti)
library(neurobase)
library(coda)
library(RandomFieldsUtils)
library(PrevMap)
library(BayesGPfit)
load("/home/ben/data/abide_3mm.RData")
sourceCpp("/home/ben/Rpackage/BSPBSS/src/Rcpp.cpp")
library(Rcpp)
library(RcppArmadillo)
#sourceCpp("/Users/ben/desktop/Rpackage/BSPBSS/src/Rcpp.cpp")
sourceCpp("/home/ben/Rpackage/BSPBSS/src/Rcpp.cpp")
library(BSPBSS)
#sourceCpp("/Users/ben/desktop/Rpackage/BSPBSS/src/Rcpp.cpp")
sourceCpp("/home/ben/Rpackage/Rcpptmp.cpp")
p
#sourceCpp("/Users/ben/desktop/Rpackage/BSPBSS/src/Rcpp.cpp")
sourceCpp("/home/ben/Rpackage/Rcpptmp.cpp")
