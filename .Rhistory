ICA = S_list[[i]]
ind = compute.match.idx.s.tra2(ICA,X$S)
ICA1 = ICA[ind,]
for(j in 1:3){
if( mean(ICA1[j,])<0 ){
ICA1[j,] = -ICA1[j,]
}
}
#ICA1 = Z_score(ICA1,2)
f1_ICA[i,] = classification_score((X$S!=0),(ICA1!=0))
}
f1_mean[tag1,] = apply(f1_ICA,2,mean)*1000
f1_sd[tag1,] = apply(f1_ICA,2,sd)*1000
tag1 = tag1 + 1
}
f1_mean_list[[tag0]] = f1_mean
f1_sd_list[[tag0]] = f1_sd
tag0 = tag0 + 1
}
f1_mean_list[[1]]
f1_sd_list[[1]]
f1_mean_list[[2]]
f1_sd_list[[2]]
f1_mean_list[[3]]
f1_sd_list[[3]]
rm(list=ls())
gc()
library(BSPBSS)
library(ica)
library(oro.nifti)
library(neurobase)
library(coda)
library(RandomFieldsUtils)
library(PrevMap)
library(BayesGPfit)
library(Rcpp)
library(RcppArmadillo)
library(RcppParallel)
#sourceCpp("/Users/ben/desktop/Rpackage/BSPBSS/src/Rcpp.cpp")
sourceCpp("/home/ben/Rpackage/Rcpptmp.cpp")
source("/home/ben/Rpackage/bspbss_fun.R")
## real data
#load("/Users/ben/desktop/work3/data/abide_3mm.RData")
nii = readNIfTI('/home/ben/data/AAL_90_3mm.nii')
load("/home/ben/data/abide_3mm.RData")
d0 = 0.5
mask1 = rep(0, nrow(coord))
coord0 = as.matrix(coord)
for(i in 1:nrow(coord)){
mask1[i] = aal_map[coord0[i,][1],coord0[i,][2],coord0[i,][3]]
}
rm(falff)
rm(lfcd)
rm(reho)
gc()
X = degree_weighted
n = nrow(X)
for(i in 1:n){
sdx = sd(X[i,])
if(sdx!=0){
X[i,] = (X[i,] ) /sdx
}
}
##########testing##############
path0 = "/home/ben/work/bspbss/real_kernel2/"
#path0 = "/Users/ben/desktop/test/"
MClength = 15000
burn_in = 5000
show_step = 100
decay0 = lr0 = 0.01
d0=0.3
ini = readRDS(paste0(path0,"ini_gk002_120_nf500_q30_d03_001100.rds"))
ini$init$stepsize_zeta = ini$init$stepsize_zeta*0.1
#saveRDS(ini,paste0(path0,"ini_gk002_120_nf500_q30_d03_noise",i,"_.rds") )
#ini = readRDS(paste0(path0,"ini_gk002_120_nf500_q30_d03_noise",i,"_.rds"))
#ini$init$stepsize_zeta = (ini$init$zeta+1e-10) * 0.1
#ini$prior$zeta = c(0,1)
#ini = readRDS(paste0(path0,"ini_gk002_120_nf500_d05_noise",i,"_.rds"))
res = mcmc_bspbss(X,ini$init,ini$prior,ini$kernel,ep=0.1,lr = lr0,decay=decay0,subsample_n = 0.05, subsample_p = 0.005,MClength,burn_in,thin=20,show_step)
res_sum = sum_mcmc_bspbss(res, X, ini$kernel, start = 501, end = 750, select_p = 0.5)
#res_sum2 = sum_mcmc_bspbss(res, X, ini$kernel, start = 2001, end = 3000, select_p = 0.5)
#saveRDS(res,paste0(path0,"res_gk002_120_30k_b5k_nf500_q30_d03_newtest_noise",i,"_.rds"))
#saveRDS(res_sum,paste0(path0,"res_sum_gk002_120_30k_b5k_nf500_q30_d03_newtest_noise",i,"_.rds"))
saveRDS(res,paste0(path0,"res_gk002_120_15k_b5k_nf500_q20_d03_001100_.rds"))
saveRDS(res_sum,paste0(path0,"res_sum_gk002_120_15k_b5k_nf500_q30_d03_001100_.rds"))
#res = readRDS(paste0(path0,"res_gk002_120_30k_b5k_nf500_q30_d03_newtest_noise",i,"_.rds"))
#res_sum = readRDS(paste0(path0,"res_sum_gk002_120_30k_b5k_nf500_q30_d03_newtest_noise",i,"_.rds"))
res2 = mcmc_bspbss_pickup(X,res,ini$init,ini$prior,ini$kernel,ep=0.1,lr = lr0,decay=decay0,subsample_n = 0.05, subsample_p = 0.005,MClength,thin=20,show_step)
res_sum = sum_mcmc_bspbss(res2, X, ini$kernel, start = 1, end = 750, select_p = 0.5)
#saveRDS(res2,paste0(path0,"res2_gk002_120_30k_b5k_nf500_q30_d03_newtest_noise",i,"_.rds"))
#saveRDS(res_sum,paste0(path0,"res_sum2_gk002_120_30k_b5k_nf500_q30_d03_newtest_noise",i,"_.rds"))
saveRDS(res2,paste0(path0,"res2_gk002_120_30k_b15k_nf500_q30_d03_001100_.rds"))
saveRDS(res_sum,paste0(path0,"res_sum2_gk002_120_30k_b15k_nf500_q30_d03_001100_.rds"))
path0 = "/home/ben/work/bspbss/real_kernel2/"
res_sum_list = list()
loglist = list()
for(i in 1:6){
res_sum_list[[i]] = readRDS(paste0(path0,"res_sum2_gk002_120_30k_b5k_nf500_q30_d03_newtest_noise",i,"_.rds"))
loglist[[i]] = res_sum_list[[i]]$loglik
}
res_sum_list[[3]] = res_sum_list[[6]]
#dmn(vmpfc) #dmn(ilpc) #dmn(mpc) #
flipp = list()
flipp[[1]] = c(1,-1,-1,1,-1)
flipp[[2]] = c(1,1,-1,-1,-1)
flipp[[3]] = c(-1,-1,-1,1,-1)
compp = list()
compp[[1]] = c(26,3,24,18,13)
compp[[2]] = c(19,10,3,7,3)
compp[[3]] = c(7,4,7,17,7)
d = 1
set.seed(d)
comp_sum = rep(0, 38547)
for(i in 5:5){
comp_sum = comp_sum + flipp[[d]][i] * res_sum_list[[i]]$S[compp[[d]][i], ]
}
a = sort(comp_sum,decreasing = TRUE)
idx = which(comp_sum > a[100])
d = 1
set.seed(d)
comp_sum = rep(0, 38547)
for(i in 5:5){
comp_sum = comp_sum + flipp[[d]][i] * res_sum_list[[i]]$S[compp[[d]][i], ]
}
a = sort(comp_sum,decreasing = TRUE)
idx = which(comp_sum > a[100])
n =5
#n=30
point = sample(idx,n)
s00 = rep(0,750)
for(l in 1:5){
for(i in 1:750){
s00[i] = flipp[[d]][1] * res_sum_list[[1]]$Slist[[i]][compp[[d]][1],point[l]]
}
effectiveSize(s00)
}
s00 = rep(0,750)
for(l in 1:5){
for(i in 1:750){
s00[i] = flipp[[d]][1] * res_sum_list[[1]]$Slist[[i]][compp[[d]][1],point[l]]
}
print( effectiveSize(s00) )
}
d =2
set.seed(d)
comp_sum = rep(0, 38547)
for(i in 5:5){
comp_sum = comp_sum + flipp[[d]][i] * res_sum_list[[i]]$S[compp[[d]][i], ]
}
a = sort(comp_sum,decreasing = TRUE)
idx = which(comp_sum > a[100])
n =5
#n=30
point = sample(idx,n)
s00 = rep(0,750)
for(l in 1:5){
for(i in 1:750){
s00[i] = flipp[[d]][1] * res_sum_list[[1]]$Slist[[i]][compp[[d]][1],point[l]]
}
print( effectiveSize(s00) )
}
d =3
set.seed(d)
comp_sum = rep(0, 38547)
for(i in 5:5){
comp_sum = comp_sum + flipp[[d]][i] * res_sum_list[[i]]$S[compp[[d]][i], ]
}
a = sort(comp_sum,decreasing = TRUE)
idx = which(comp_sum > a[100])
n =5
#n=30
point = sample(idx,n)
s00 = rep(0,750)
for(l in 1:5){
for(i in 1:750){
s00[i] = flipp[[d]][1] * res_sum_list[[1]]$Slist[[i]][compp[[d]][1],point[l]]
}
print( effectiveSize(s00) )
}
s0 = 0
tag0 = 1
f1_mean_list = list()
f1_sd_list = list()
for(k in c('1e3','5e4','1e4')){
X_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/Xlist",k,"s",s0,"_n30.rds") )
f1_mean = matrix(0,nrow=1,ncol=4)
f1_sd = matrix(0,nrow=1,ncol=4)
tag1 = 1
for(kk in c(50)){
res_sum_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/res_sum_list_",k,"s",s0,"_",kk,"_n30new_095.rds"))
ini_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/ini_list_",k,"s",s0,"_",kk,"_n30new.rds"))
#S_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/S_list_",k,"s",s0,"_50_n30new_fdr_01.rds"))
n = 100
f1_ICA = matrix(0,ncol = 4, nrow = n)
for(i in 1:n){
X = X_list[[i]]
ICA =  res_sum_list[[i]]$S
#ICA = ini_list[[i]]$init$ICA_S
#ICA = S_list[[i]]
ind = compute.match.idx.s.tra2(ICA,X$S)
ICA1 = ICA[ind,]
for(j in 1:3){
if( mean(ICA1[j,])<0 ){
ICA1[j,] = -ICA1[j,]
}
}
#ICA1 = Z_score(ICA1,2)
f1_ICA[i,] = classification_score((X$S!=0),(ICA1!=0))
}
f1_mean[tag1,] = apply(f1_ICA,2,mean)*1000
f1_sd[tag1,] = apply(f1_ICA,2,sd)*1000
tag1 = tag1 + 1
}
f1_mean_list[[tag0]] = f1_mean
f1_sd_list[[tag0]] = f1_sd
tag0 = tag0 + 1
}
f1_mean_list[[1]]
f1_sd_list[[1]]
f1_mean_list[[2]]
f1_sd_list[[2]]
f1_mean_list[[3]]
f1_sd_list[[3]]
source("/home/ben/Rpackage/bspbss_func.R")
s0 = 0
tag0 = 1
f1_mean_list = list()
f1_sd_list = list()
for(k in c('1e3','5e4','1e4')){
X_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/Xlist",k,"s",s0,"_n30.rds") )
f1_mean = matrix(0,nrow=1,ncol=4)
f1_sd = matrix(0,nrow=1,ncol=4)
tag1 = 1
for(kk in c(50)){
res_sum_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/res_sum_list_",k,"s",s0,"_",kk,"_n30new_095.rds"))
ini_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/ini_list_",k,"s",s0,"_",kk,"_n30new.rds"))
#S_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/S_list_",k,"s",s0,"_50_n30new_fdr_01.rds"))
n = 100
f1_ICA = matrix(0,ncol = 4, nrow = n)
for(i in 1:n){
X = X_list[[i]]
ICA =  res_sum_list[[i]]$S
#ICA = ini_list[[i]]$init$ICA_S
#ICA = S_list[[i]]
ind = compute.match.idx.s.tra2(ICA,X$S)
ICA1 = ICA[ind,]
for(j in 1:3){
if( mean(ICA1[j,])<0 ){
ICA1[j,] = -ICA1[j,]
}
}
#ICA1 = Z_score(ICA1,2)
f1_ICA[i,] = classification_score((X$S!=0),(ICA1!=0))
}
f1_mean[tag1,] = apply(f1_ICA,2,mean)*1000
f1_sd[tag1,] = apply(f1_ICA,2,sd)*1000
tag1 = tag1 + 1
}
f1_mean_list[[tag0]] = f1_mean
f1_sd_list[[tag0]] = f1_sd
tag0 = tag0 + 1
}
f1_mean_list[[1]]
f1_sd_list[[1]]
f1_mean_list[[2]]
f1_sd_list[[2]]
f1_mean_list[[3]]
f1_sd_list[[3]]
for(q0 in c(5,7,9)){
for(s0 in c(0,6)){
tag1 = 0
for(noise in c("1e3","5e4","1e4")){
X_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/Xlist",noise,"s",s0,"_n30.rds") )
ini_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/ini_list_",noise,"s",s0,"_q",q0,"_01_n30new.rds") )
res_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/res_list_",noise,"s",s0,"_q",q0,"_01_n30new.rds"))
res_sum_list = list()
for(i in 1:100){
X = X_list[[i]]
ini = ini_list[[i]]
res = res_list[[i]]
res_sum = sum_mcmc_bspbss(res, ini$X, ini$kernel, start = 301, end = 600, select_p = 0.0)
res_sum_list[[i]] = res_sum
}
saveRDS(res_sum_list,paste0("/home/ben/work/bspbss/sim_kernel2/res_sum_list_",noise,"s",s0,"_q",q0,"_01_n30new_0.rds") )
}
}
}
alpha = 0.1
for(q0 in c(5,7,9)){
for(s0 in c(0,6)){
for(noise in c("1e3","5e4","1e4")){
res_sum_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/res_sum_list_",noise,"s",s0,"_q",q0,"_01_n30new_0.rds"))
S_list = list()
for(i in 1:100){
S = res_sum_list[[i]]$S * 1
pip = res_sum_list[[i]]$pip * 1
S0 = matrix(0,3,900)
prob = sort(as.numeric(pip),decreasing = TRUE)
count = 0
l0=0
for(l in 1:2700){
count = count + (1-prob[l])
if(count/l <= alpha){
if(l > l0){
l0 = l
}
}
}
print(prob[l0])
S0 = S * (pip>=prob[l0])
S_list[[i]] = S0
}
saveRDS(S_list, paste0("/home/ben/work/bspbss/sim_kernel2/S_list_",noise,"s",s0,"_q",q0,"_01_n30new_fdr_01.rds"))
}
}
}
s0 = 0
noise = "5e4"
count = list()
tag = 1
for(q0 in c(5,7,9)){
#res_sum_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/res_sum_list_5e4s0_q",q0,"_01_n30new_095.rds"))
S_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/S_list_",noise,"s",s0,"_q",q0,"_01_n30new_fdr_01.rds"))
count[[tag]] = rep(0,100)
for(i in 1:100){
#res_sum = res_sum_list[[i]]
#count[[tag]][i] = sum(apply(abs(res_sum$S),1,sum)>0)
count[[tag]][i] = sum(apply(abs(S_list[[i]],1,sum)>0))
}
tag = tag + 1
}
table(count[[1]])
table(count[[2]])
table(count[[3]])
s0 = 0
noise = "5e4"
count = list()
tag = 1
for(q0 in c(5,7,9)){
#res_sum_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/res_sum_list_5e4s0_q",q0,"_01_n30new_095.rds"))
S_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/S_list_",noise,"s",s0,"_q",q0,"_01_n30new_fdr_01.rds"))
count[[tag]] = rep(0,100)
for(i in 1:100){
#res_sum = res_sum_list[[i]]
#count[[tag]][i] = sum(apply(abs(res_sum$S),1,sum)>0)
count[[tag]][i] = sum(apply( abs(S_list[[i]]) ,1,sum)>0)
}
tag = tag + 1
}
table(count[[1]])
table(count[[2]])
table(count[[3]])
s0 = 0
noise = "1e4"
count = list()
tag = 1
for(q0 in c(5,7,9)){
#res_sum_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/res_sum_list_5e4s0_q",q0,"_01_n30new_095.rds"))
S_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/S_list_",noise,"s",s0,"_q",q0,"_01_n30new_fdr_01.rds"))
count[[tag]] = rep(0,100)
for(i in 1:100){
#res_sum = res_sum_list[[i]]
#count[[tag]][i] = sum(apply(abs(res_sum$S),1,sum)>0)
count[[tag]][i] = sum(apply( abs(S_list[[i]]) ,1,sum)>0)
}
tag = tag + 1
}
table(count[[1]])
table(count[[2]])
table(count[[3]])
s0 = 0
noise = "1e3"
count = list()
tag = 1
for(q0 in c(5,7,9)){
#res_sum_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/res_sum_list_5e4s0_q",q0,"_01_n30new_095.rds"))
S_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/S_list_",noise,"s",s0,"_q",q0,"_01_n30new_fdr_01.rds"))
count[[tag]] = rep(0,100)
for(i in 1:100){
#res_sum = res_sum_list[[i]]
#count[[tag]][i] = sum(apply(abs(res_sum$S),1,sum)>0)
count[[tag]][i] = sum(apply( abs(S_list[[i]]) ,1,sum)>0)
}
tag = tag + 1
}
table(count[[1]])
table(count[[2]])
table(count[[3]])
s0 = 6
noise = "1e3"
count = list()
tag = 1
for(q0 in c(5,7,9)){
#res_sum_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/res_sum_list_5e4s0_q",q0,"_01_n30new_095.rds"))
S_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/S_list_",noise,"s",s0,"_q",q0,"_01_n30new_fdr_01.rds"))
count[[tag]] = rep(0,100)
for(i in 1:100){
#res_sum = res_sum_list[[i]]
#count[[tag]][i] = sum(apply(abs(res_sum$S),1,sum)>0)
count[[tag]][i] = sum(apply( abs(S_list[[i]]) ,1,sum)>0)
}
tag = tag + 1
}
table(count[[1]])
table(count[[2]])
table(count[[3]])
s0 = 6
noise = "5e4"
count = list()
tag = 1
for(q0 in c(5,7,9)){
#res_sum_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/res_sum_list_5e4s0_q",q0,"_01_n30new_095.rds"))
S_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/S_list_",noise,"s",s0,"_q",q0,"_01_n30new_fdr_01.rds"))
count[[tag]] = rep(0,100)
for(i in 1:100){
#res_sum = res_sum_list[[i]]
#count[[tag]][i] = sum(apply(abs(res_sum$S),1,sum)>0)
count[[tag]][i] = sum(apply( abs(S_list[[i]]) ,1,sum)>0)
}
tag = tag + 1
}
table(count[[1]])
table(count[[2]])
table(count[[3]])
s0 = 6
noise = "1e4"
count = list()
tag = 1
for(q0 in c(5,7,9)){
#res_sum_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/res_sum_list_5e4s0_q",q0,"_01_n30new_095.rds"))
S_list = readRDS(paste0("/home/ben/work/bspbss/sim_kernel2/S_list_",noise,"s",s0,"_q",q0,"_01_n30new_fdr_01.rds"))
count[[tag]] = rep(0,100)
for(i in 1:100){
#res_sum = res_sum_list[[i]]
#count[[tag]][i] = sum(apply(abs(res_sum$S),1,sum)>0)
count[[tag]][i] = sum(apply( abs(S_list[[i]]) ,1,sum)>0)
}
tag = tag + 1
}
table(count[[1]])
table(count[[2]])
table(count[[3]])
rm(list=ls())
gc()
library(BSPBSS)
library(ica)
library(oro.nifti)
library(neurobase)
library(coda)
library(RandomFieldsUtils)
library(PrevMap)
library(BayesGPfit)
library(Rcpp)
library(RcppArmadillo)
library(RcppParallel)
#sourceCpp("/Users/ben/desktop/Rpackage/BSPBSS/src/Rcpp.cpp")
sourceCpp("/home/ben/Rpackage/Rcpptmp.cpp")
source("/home/ben/Rpackage/bspbss_fun.R")
## real data
#load("/Users/ben/desktop/work3/data/abide_3mm.RData")
nii = readNIfTI('/home/ben/data/AAL_90_3mm.nii')
load("/home/ben/data/abide_3mm.RData")
d0 = 0.5
mask1 = rep(0, nrow(coord))
coord0 = as.matrix(coord)
for(i in 1:nrow(coord)){
mask1[i] = aal_map[coord0[i,][1],coord0[i,][2],coord0[i,][3]]
}
rm(falff)
rm(lfcd)
rm(reho)
gc()
X = degree_weighted
n = nrow(X)
for(i in 1:n){
sdx = sd(X[i,])
if(sdx!=0){
X[i,] = (X[i,] ) /sdx
}
}
##########testing##############
path0 = "/home/ben/work/bspbss/real_kernel2/"
#path0 = "/Users/ben/desktop/test/"
MClength = 15000
burn_in = 5000
show_step = 100
decay0 = lr0 = 0.01
d0=0.3
ini = readRDS(paste0(path0,"ini_gk002_120_nf500_q30_d03_001100.rds"))
ini$init$stepsize_zeta = ini$init$stepsize_zeta*0.1
#saveRDS(ini,paste0(path0,"ini_gk002_120_nf500_q30_d03_noise",i,"_.rds") )
#ini = readRDS(paste0(path0,"ini_gk002_120_nf500_q30_d03_noise",i,"_.rds"))
#ini$init$stepsize_zeta = (ini$init$zeta+1e-10) * 0.1
#ini$prior$zeta = c(0,1)
#ini = readRDS(paste0(path0,"ini_gk002_120_nf500_d05_noise",i,"_.rds"))
res = mcmc_bspbss(X,ini$init,ini$prior,ini$kernel,ep=0.1,lr = lr0,decay=decay0,subsample_n = 0.05, subsample_p = 0.005,MClength,burn_in,thin=20,show_step)
res_sum = sum_mcmc_bspbss(res, X, ini$kernel, start = 501, end = 750, select_p = 0.5)
#res_sum2 = sum_mcmc_bspbss(res, X, ini$kernel, start = 2001, end = 3000, select_p = 0.5)
#saveRDS(res,paste0(path0,"res_gk002_120_30k_b5k_nf500_q30_d03_newtest_noise",i,"_.rds"))
#saveRDS(res_sum,paste0(path0,"res_sum_gk002_120_30k_b5k_nf500_q30_d03_newtest_noise",i,"_.rds"))
saveRDS(res,paste0(path0,"res_gk002_120_15k_b5k_nf500_q20_d03_001100_.rds"))
saveRDS(res_sum,paste0(path0,"res_sum_gk002_120_15k_b5k_nf500_q30_d03_001100_.rds"))
#res = readRDS(paste0(path0,"res_gk002_120_30k_b5k_nf500_q30_d03_newtest_noise",i,"_.rds"))
#res_sum = readRDS(paste0(path0,"res_sum_gk002_120_30k_b5k_nf500_q30_d03_newtest_noise",i,"_.rds"))
res2 = mcmc_bspbss_pickup(X,res,ini$init,ini$prior,ini$kernel,ep=0.1,lr = lr0,decay=decay0,subsample_n = 0.05, subsample_p = 0.005,MClength,thin=20,show_step)
res_sum = sum_mcmc_bspbss(res2, X, ini$kernel, start = 1, end = 750, select_p = 0.5)
#saveRDS(res2,paste0(path0,"res2_gk002_120_30k_b5k_nf500_q30_d03_newtest_noise",i,"_.rds"))
#saveRDS(res_sum,paste0(path0,"res_sum2_gk002_120_30k_b5k_nf500_q30_d03_newtest_noise",i,"_.rds"))
saveRDS(res2,paste0(path0,"res2_gk002_120_30k_b15k_nf500_q30_d03_001100_.rds"))
saveRDS(res_sum,paste0(path0,"res_sum2_gk002_120_30k_b15k_nf500_q30_d03_001100_.rds"))
sessionInfo()
sessionInfo()
