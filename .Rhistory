for(i in 2:1000){
x[i] = x[i-1] + (0.05/252 - sigma2[i-1]/2)/1000 + sqrt(sigma2[i-1])* dB[i]
sigma2[i] = sigma2[i-1] + 5/252*(0.1/252 - sigma2[i-1])/1000 + 6/252 *sqrt(sigma2[i-1])* dB[i]
}
sum( (x[-1000] - x[-1])^2)
x = rep(0,1000)
sigma2 = rep(0,1000)
sigma2[1] = 0.003
dB = rnorm(1000) / sqrt(1000)
for(i in 2:1000){
x[i] = x[i-1] + (0.05/252 - sigma2[i-1]/2)/1000 + sqrt(sigma2[i-1])* dB[i]
sigma2[i] = sigma2[i-1] + 5/252*(0.1/252 - sigma2[i-1])/1000 + 6/252 *sqrt(sigma2[i-1])* dB[i]
}
sum( (x[-1000] - x[-1])^2)
x = rep(0,1000)
sigma2 = rep(0,1000)
sigma2[1] = 0.003
dB = rnorm(1000) / sqrt(1000)
for(i in 2:1000){
x[i] = x[i-1] + (0.05/252 - sigma2[i-1]/2)/1000 + sqrt(sigma2[i-1])* dB[i]
sigma2[i] = sigma2[i-1] + 5/252*(0.1/252 - sigma2[i-1])/1000 + 6/252 *sqrt(sigma2[i-1])* dB[i]
}
sum( (x[-1000] - x[-1])^2)
x = rep(0,1000)
sigma2 = rep(0,1000)
sigma2[1] = 0.003
dB = rnorm(1000) / sqrt(1000)
for(i in 2:1000){
x[i] = x[i-1] + (0.05/252 - sigma2[i-1]/2)/1000 + sqrt(sigma2[i-1])* dB[i]
sigma2[i] = sigma2[i-1] + 5/252*(0.1/252 - sigma2[i-1])/1000 + 6/252 *sqrt(sigma2[i-1])* dB[i]
}
sum( (x[-1000] - x[-1])^2)
x = rep(0,1000)
sigma2 = rep(0,1000)
sigma2[1] = 0.003
dB = rnorm(1000) / sqrt(1000)
for(i in 2:1000){
x[i] = x[i-1] + (0.05/252 - sigma2[i-1]/2)/1000 + sqrt(sigma2[i-1])* dB[i]
sigma2[i] = sigma2[i-1] + 5/252*(0.1/252 - sigma2[i-1])/1000 + 6/252 *sqrt(sigma2[i-1])* dB[i]
}
sum( (x[-1000] - x[-1])^2)
x = rep(0,1000)
sigma2 = rep(0,1000)
sigma2[1] = 0.003
dB = rnorm(1000) / sqrt(1000)
for(i in 2:1000){
x[i] = x[i-1] + (0.05/252 - sigma2[i-1]/2)/1000 + sqrt(sigma2[i-1])* dB[i]
sigma2[i] = sigma2[i-1] + 5/252*(0.1/252 - sigma2[i-1])/1000 + 6/252 *sqrt(sigma2[i-1])* dB[i]
}
sum( (x[-1000] - x[-1])^2)
x = rep(0,1000)
sigma2 = rep(0,1000)
sigma2[1] = 0.003
dB = rnorm(1000) / sqrt(1000)
for(i in 2:1000){
x[i] = x[i-1] + (0.05/252 - sigma2[i-1]/2)/1000 + sqrt(sigma2[i-1])* dB[i]
sigma2[i] = sigma2[i-1] + 5/252*(0.1/252 - sigma2[i-1])/1000 + 6/252 *sqrt(sigma2[i-1])* dB[i]
}
sum( (x[-1000] - x[-1])^2)
x = rep(0,1000)
sigma2 = rep(0,1000)
sigma2[1] = 0.003
dB = rnorm(1000) / sqrt(1000)
for(i in 2:1000){
x[i] = x[i-1] + (0.05/252 - sigma2[i-1]/2)/1000 + sqrt(sigma2[i-1])* dB[i]
sigma2[i] = sigma2[i-1] + 5/252*(0.1/252 - sigma2[i-1])/1000 + 6/252 *sqrt(sigma2[i-1])* dB[i]
}
sum( (x[-1000] - x[-1])^2)
x = rep(0,1000)
sigma2 = rep(0,1000)
sigma2[1] = 0.003
dB = rnorm(1000) / sqrt(1000)
for(i in 2:1000){
x[i] = x[i-1] + (0.05/252 - sigma2[i-1]/2)/1000 + sqrt(sigma2[i-1])* dB[i]
sigma2[i] = sigma2[i-1] + 5/252*(0.1/252 - sigma2[i-1])/1000 + 6/252 *sqrt(sigma2[i-1])* dB[i]
}
sum( (x[-1000] - x[-1])^2)
x = rep(0,1000)
sigma2 = rep(0,1000)
sigma2[1] = 0.003
dB = rnorm(1000) / sqrt(1000)
for(i in 2:1000){
x[i] = x[i-1] + (0.05/252 - sigma2[i-1]/2)/1000 + sqrt(sigma2[i-1])* dB[i]
sigma2[i] = sigma2[i-1] + 5/252*(0.1/252 - sigma2[i-1])/1000 + 6/252 *sqrt(sigma2[i-1])* dB[i]
}
sum( (x[-1000] - x[-1])^2)
x = rep(0,1000)
sigma2 = rep(0,1000)
sigma2[1] = 0.003
dB = rnorm(1000) / sqrt(1000)
for(i in 2:1000){
x[i] = x[i-1] + (0.05/252 - sigma2[i-1]/2)/1000 + sqrt(sigma2[i-1])* dB[i]
sigma2[i] = sigma2[i-1] + 5/252*(0.1/252 - sigma2[i-1])/1000 + 6/252 *sqrt(sigma2[i-1])* dB[i]
}
sum( (x[-1000] - x[-1])^2)
x = rep(0,1000)
sigma2 = rep(0,1000)
sigma2[1] = 0.003
dB = rnorm(1000) / sqrt(1000)
for(i in 2:1000){
x[i] = x[i-1] + (0.05/252 - sigma2[i-1]/2)/1000 + sqrt(sigma2[i-1])* dB[i]
sigma2[i] = sigma2[i-1] + 5/252*(0.1/252 - sigma2[i-1])/1000 + 6/252 *sqrt(sigma2[i-1])* dB[i]
}
sum( (x[-1000] - x[-1])^2)
x = rep(0,1000)
sigma2 = rep(0,1000)
sigma2[1] = 0.003
dB = rnorm(1000) / sqrt(1000)
for(i in 2:1000){
x[i] = x[i-1] + (0.05/252 - sigma2[i-1]/2)/1000 + sqrt(sigma2[i-1])* dB[i]
sigma2[i] = sigma2[i-1] + 5/252*(0.1/252 - sigma2[i-1])/1000 + 6/252 *sqrt(sigma2[i-1])* dB[i]
}
sum( (x[-1000] - x[-1])^2)
saveRDS(ini_dwc, "/Users/ben/desktop/bspbssdata/ini.rds")
res_dwc = mcmc_bspbss(ini_dwc$X, ini_dwc$init, ini_dwc$prior, ini_dwc$kernel,
n.iter=15000, n.burn_in=5000, thin=20, show_step=100,
subsample_n = 0.05, subsample_p=0.005, num_leapfrog = 10,
ep = 0.1, lr = 0.01, decay = 0.01)
saveRDS(res_dwc,"/Users/ben/desktop/bspbssdata/dwc.rds")
ini_falff = init_bspbss(falff, coord, dens = 0.3, q = 30, ker_par = c(0.01, 100),
num_eigen = 500)
saveRDS(ini_falff, "/Users/ben/desktop/bspbssdata/ini_falff.rds")
res_falff = mcmc_bspbss(ini_falff$X, ini_falff$init, ini_falff$prior, ini_falff$kernel,
n.iter=15000, n.burn_in=5000, thin=20, show_step=100,
subsample_n = 0.05, subsample_p=0.005, num_leapfrog = 10,
ep = 0.1, lr = 0.01, decay = 0.01)
dim(res_falff$A)
res_sum_falff = sum_mcmc_bspbss(res_falff, ini_falff$X, ini_falff$kernel, start = 251, end = 750, select_p = 0.5)
saveRDS(res_sum_falff, "/Users/ben/desktop/bspbssdata/falff.rds")
nii = readNIfTI("/Users/ben/desktop/work3/data/AAL_90_3mm.nii")
output_nii(res_sum_dwc, nii, coord, file = "/Users/ben/desktop/bspbssdata/dwc")
output_nii(res_sum_falff, nii, coord, file = "/Users/ben/desktop/bspbssdata/dwc")
output_nii(res_sum_falff$S, nii, coord, file = "/Users/ben/desktop/bspbssdata/dwc")
res_sum_dwc = sum_mcmc_bspbss(res_dwc, ini_dwc$X, ini_dwc$kernel, start = 1, end = 20, select_p = 0.5)
output_nii(res_sum_falff$S, nii, coord, file = "/Users/ben/desktop/bspbssdata/dwc")
res_sum_falff = sum_mcmc_bspbss(res_falff, ini_falff$X, ini_falff$kernel, start = 1, end = 20, select_p = 0.5)
output_nii(res_sum_falff$S, nii, coord, file = "/Users/ben/desktop/bspbssdata/dwc")
res_sum_dwc = sum_mcmc_bspbss(res_dwc, ini_dwc$X, ini_dwc$kernel, start = 251, end = 750, select_p = 0.5)
saveRDS(res_falff, "/Users/ben/desktop/bspbssdata/falff.rds")
saveRDS(res_sum_dwc, "/Users/ben/desktop/bspbssdata/res_sum_dwc.rds")
output_nii(res_sum_dwc$S, nii, coord, file = "/Users/ben/desktop/bspbssdata/dwc")
res_sum_dwc = sum_mcmc_bspbss(res_dwc, ini_dwc$X, ini_dwc$kernel, start = 101, end = 200, select_p = 0.5)
output_nii(res_sum_dwc$S, nii, coord, file = "/Users/ben/desktop/bspbssdata/dwc")
res_sum_dwc = sum_mcmc_bspbss(res_dwc, ini_dwc$X, ini_dwc$kernel, start = 1, end = 20, select_p = 0.5)
output_nii(res_sum_dwc$S, nii, coord, file = "/Users/ben/desktop/bspbssdata/dwc")
res_sum_dwc = sum_mcmc_bspbss(res_dwc, ini_dwc$X, ini_dwc$kernel, start = 1, end = 2, select_p = 0.5)
output_nii(res_sum_dwc$S, nii, coord, file = "/Users/ben/desktop/bspbssdata/dwc")
res_sum_falff = sum_mcmc_bspbss(res_falff, ini_falff$X, ini_falff$kernel, start = 1, end = , select_p = 0.5)
res_sum_falff = sum_mcmc_bspbss(res_falff, ini_falff$X, ini_falff$kernel, start = 1, end = 2, select_p = 0.5)
output_nii(res_sum_falff$S, nii, coord, file = "/Users/ben/desktop/bspbssdata/falff")
output_nii(ini_dwc$S, nii, coord, file = "/Users/ben/desktop/bspbssdata/ini_dwc")
output_nii(ini_dwc$init$S, nii, coord, file = "/Users/ben/desktop/bspbssdata/ini_dwc")
output_nii(ini_falff$init$S, nii, coord, file = "/Users/ben/desktop/bspbssdata/ini_falff")
dim( ini_falff$init$S )
apply(ini_falff$init$ICA_S,1,max)
apply(abs(ini_falff$init$ICA_S),1,max)
apply(abs(ini_falff$init$ICA_S),1,mean)
apply(abs(ini_dwc$init$ICA_S),1,mean)
ICA_imax = function(X,q){
ica0 = icaimax(t(X),nc=q,center=FALSE)
IC_initial = ica0$S
A_mt =  ica0$M
D = diag(apply(A_mt,2,'norm_vec'))
A_0 = A_mt%*%solve(D)
S_0 = t(IC_initial%*%t(D))
out = list()
out$S = S_0
out$A = A_0
return(out)
}
norm_vec = function(v){
return(sqrt(sum(v^2)))
}
X = res_falff
n = nrow(X)
p = ncol(X)
for(i in 1:n){
sdx = sd(X[i,])
if(sdx!=0){
X[i,] = (X[i,])/sdx
}
}
n
X = falff
n = nrow(X)
p = ncol(X)
for(i in 1:n){
sdx = sd(X[i,])
if(sdx!=0){
X[i,] = (X[i,])/sdx
}
}
ica_tmp = ICA_imax(X,q)
q
q = 30
ica_tmp = ICA_imax(X,q)
dim(ica_tmp$S)
var(ica_tmp$S[1,])
var(ica_tmp$S[2,])
var(ica_tmp$S[3,])
dim(ica_tmp$A)
sum(ica_tmp$A[,1]^2)
sum(ica_tmp$A[,1]^3)
sum(ica_tmp$A[,3]^2)
ini_falff$prior$zeta
ICA_imax = function(X,q){
ica0 = icaimax(t(X),nc=q,center=TRUE)
IC_initial = ica0$S
A_mt =  ica0$M
D = diag(apply(A_mt,2,'norm_vec'))
A_0 = A_mt%*%solve(D)
S_0 = t(IC_initial%*%t(D))
out = list()
out$S = S_0
out$A = A_0
return(out)
}
ica_tmp = ICA_imax(X,q)
var(ica_tmp$S[1,])
var(ica_tmp$S[2,])
var(ica_tmp$S[3,])
var(ica_tmp$S[4,])
var(ica_tmp$S[5,])
var(ica_tmp$S[6,])
var(ica_tmp$A[,1])
var(ica_tmp$A[,2]^2)
var(ica_tmp$A[1,]^2)
sum(ica_tmp$A[,2]^2)
library(BSPBSS)
ini_falff = init_bspbss(falff, coord, dens = 0.3, q = 30, ker_par = c(0.01, 100),
num_eigen = 500)
saveRDS(ini_falff, "/Users/ben/desktop/bspbssdata/ini_falff_new.rds")
output_nii(ini_falff$init$S, nii, coord, file = "/Users/ben/desktop/bspbssdata/ini_falff_new")
init_bspbss()
init_bspbss
ICA_imax
var(ini_falff$init$ICA_S[1,])
var(ini_falff$init$ICA_S[2,])
var(ini_falff$init$ICA_S[3,])
res_falff = mcmc_bspbss(ini_falff$X, ini_falff$init, ini_falff$prior, ini_falff$kernel,
n.iter=5000, n.burn_in=2000, thin=20, show_step=100,
subsample_n = 0.05, subsample_p=0.005, num_leapfrog = 10,
ep = 0.1, lr = 0.01, decay = 0.01)
a = readRDS("/Users/ben/desktop/data.rds")
dim(a)
head(a)
dim(res_falff$A)
res_sum_falff = sum_mcmc_bspbss(res_falff, ini_falff$X, ini_falff$kernel, start = 101, end = 250, select_p = 0.5)
output_nii(res_sum_falff$S, nii, coord, file = "/Users/ben/desktop/bspbssdata/falff_mew")
data = read.csv("/Users/ben/desktop/丽江市(1).csv")
dim(data)
data0 = data.frame( data$预警等级, data$预警, data$YL_value, data$YL_totalValue,
data$GP_gpsTotalX, data$GP_gpsTotalY, data$GP_gpsTotalZ)
dim(data0)
table( data0$data.预警 )
table( data0$data.预警等级 )
apply(data0[ data0$data.预警等级==1,3:7], 2, mean)
apply(data0[ data0$data.预警等级==2,3:7], 2, mean)
apply(data0[ data0$data.预警等级==4,3:7], 2, mean)
apply(data0[ data0$data.预警等级==1,3:7], 2, mean)
apply(data0[ data0$data.预警等级==4,3:7], 2, mean)
apply(data0[ data0$data.预警等级==4,3:7], 2, sd)
apply(data0[ data0$data.预警等级==1,3:7], 2, sd)
hist( data0$data.GP_gpsTotalX )
hist( data0$data.GP_gpsTotalX )
hist( data0$data.GP_gpsTotalY )
hist( data0$data.GP_gpsTotalZ )
hist( data0$data.GP_gpsTotalX )
hist( data0$data.YL_value )
t.test( data0[ data0$data.预警等级==0,3],data0[ data0$data.预警等级==4,3] )
hist(data0[ data0$data.预警等级==4,3])
hist(data0[ data0$data.预警等级==0,3])
data1 = data0[ (data0$data.预警等级==0)+(data0$data.预警等级==4)>1, ]
data1
dim(data1)
data0$data.预警等级==0
data1 = data0[ (data0$data.预警等级==0)+(data0$data.预警等级==4)>0, ]
data1
data1 = data0[ (data0$data.预警==0)+(data0$data.预警==4)>0, ]
dim(data1)
data1 = data0[ (data0$data.预警等级==0)+(data0$data.预警等级==4)>0, ]
?glm
res = glm(data1$data.预警等级~data1$data.YL_value,family = binomial)
data2 = data1
data2$data.预警等级 = (data2$data.预警等级 > 0)
res = glm(data2$data.预警等级~data2$data.YL_value,family = binomial)
res
predict(res)
t.test( data0[ data0$data.预警等级==0,4],data0[ data0$data.预警等级==4,4] )
hist(data0[ data0$data.预警等级==0,4])
hist(data0[ data0$data.预警等级==1,4])
hist(log(data0[ data0$data.预警等级==1,4]) )
hist(log(data0[ data0$data.预警等级==4,4]) )
hist(data0[ data0$data.预警等级==4,4])
hist(log(data0[ data0$data.预警等级==4,4]) )
hist(log(data0[ data0$data.预警等级==0,4]) )
hist(log(data0[ data0$data.预警等级==4,4]) )
t.test( log(data0[ data0$data.预警等级==0,4]),log(data0[ data0$data.预警等级==4,4] ) )
t.test( log(data0[ data0$data.预警等级==0,4]+1e-20),log(data0[ data0$data.预警等级==4,4] ) )
t.test( log(data0[ data0$data.预警等级==0,4]+1e-20),log(data0[ data0$data.预警等级==4,4]+1e-20 ) )
mean(log(data0[ data0$data.预警等级==4,4]+1e-20 ) )
hist(log(data0[ data0$data.预警等级==4,4]+1e-20 ) )
hist(log(data0[ data0$data.预警等级==0,4]+1e-20))
hist(log(data0[ data0$data.预警等级==0,4]))
hist((data0[ data0$data.预警等级==0,4]))
t.test( log(data0[ data0$data.预警等级==0,5]+1e-20),log(data0[ data0$data.预警等级==4,5]+1e-20 ) )
t.test( log(data0[ data0$data.预警等级==0,6]+1e-20),log(data0[ data0$data.预警等级==4,6]+1e-20 ) )
t.test( log(data0[ data0$data.预警等级==0,7]+1e-20),log(data0[ data0$data.预警等级==4,7]+1e-20 ) )
hist(log(data0[ data0$data.预警等级==4,7]+1e-20 ))
hist(log(data0[ data0$data.预警等级==0,7]+1e-20 ))
hist((data0[ data0$data.预警等级==0,7]+1e-20 ))
hist((data0[ data0$data.预警等级==4,7]+1e-20 ))
hist((data0[ data0$data.预警等级==0,7]+1e-20 ))
hist((data0[ data0$data.预警等级==4,7]+1e-20 ))
t.test( (data0[ data0$data.预警等级==0,7]+1e-20),(data0[ data0$data.预警等级==4,7]+1e-20 ) )
t.test( (data0[ data0$data.预警等级==0,6]+1e-20),(data0[data0$data.预警等级==4,6]+1e-20 ) )
hist((data0[data0$data.预警等级==4,6]+1e-20 ))
hist((data0[data0$data.预警等级==0,6]+1e-20 ))
hist((data0[data0$data.预警等级==4,6]+1e-20 ))
hist((data0[data0$data.预警等级==0,6]+1e-20 ))
hist((data0[data0$data.预警等级==4,6]+1e-20 ))
hist((data0[data0$data.预警等级==0,6]+1e-20 ))
hist((data0[data0$data.预警等级==0,6]+1e-20 ))
hist((data0[data0$data.预警等级==2,6]+1e-20 ))
hist((data0[data0$data.预警等级==3,6]+1e-20 ))
hist((data0[data0$data.预警等级==4,6]+1e-20 ))
t.test( log(data0[ data0$data.预警等级==1,6]+1e-20),log(data0[data0$data.预警等级==4,6]+1e-20 ) )
hist(log(data0[ data0$data.预警等级==1,6]+1e-20))
[data0$data.预警等级==1,6]
data0[data0$data.预警等级==1,6]
data0[data0$data.预警等级==2,6]
data0$data.GP_gpsTotalX[-1] - data0$data.GP_gpsTotalX[-length(data0$data.GP_gpsTotalX)]
plot( data0$data.GP_gpsTotalX[-1] - data0$data.GP_gpsTotalX[-length(data0$data.GP_gpsTotalX)] )
plot( data0$data.GP_gpsTotalX[-1] - data0$data.GP_gpsTotalX[-length(data0$data.GP_gpsTotalX)] )
lines(100*data0$data.预警等级[-1], col = "red")
100*data0$data.预警等级
a =  data0$data.GP_gpsTotalX[-1] - data0$data.GP_gpsTotalX[-length(data0$data.GP_gpsTotalX)]
cor(a,data0$data.预警等级[-1])
a =  data0$data.GP_gpsTotalY[-1] - data0$data.GP_gpsTotalY[-length(data0$data.GP_gpsTotalX)]
cor(a,data0$data.预警等级[-1])
a =  data0$data.GP_gpsTotalZ[-1] - data0$data.GP_gpsTotalZ[-length(data0$data.GP_gpsTotalX)]
cor(a,data0$data.预警等级[-1])
sys.time()
sys.time
Sys.time()
as.numeric( Sys.time() )
as.numeric( Sys.time() )
as.numeric( Sys.time() )
as.numeric( Sys.time() )
as.numeric( Sys.time() )
as.numeric( Sys.time() )
as.numeric( Sys.time() )
as.numeric( Sys.time() )
as.numeric( Sys.time() )
as.numeric( Sys.time() )
as.character( Sys.time() )
example8_1 = read.csv("/USers/ben/desktop/stat/example/chap08/example8_1.csv")
example8_1 = read.csv("/USers/ben/desktop/stat/example/chap08/example8_1.csv", fileEncoding = "GBK")
library(reshape2)
example8_2 = melt(example8_1,variable.name="品种",value.name="产量")
example8_2
model_1w<-aov(产量~品种)
knitr::opts_chunk$set(echo = TRUE)
attach(example8_2)
model_1w = aov(产量~品种)
summary(model_1w)
attach(example8_2)
model_1w = aov(产量~品种)
summary(model_1w)
# 模型的参数估计
model_1w$coefficients
example8_2
example8_1
y_mean = mean(example8_1)
y_group_mean = apply(example8_1, 2, mean)
mean(example8_1)
example8_1
class(example8_1)
as.matrix(example8_1)
y_mean = mean(as.matrix(example8_1))
y_mean
apply(example8_1, 2, mean)
SSA = sum( nrow(example8_1) (y_group_mean - y_mean)^2 )
SSA = sum( nrow(example8_1)* (y_group_mean - y_mean)^2 )
SSA
MSA = SSA/(ncol(example8_1) - 1)
example8_1 - y_group_mean
y_group_mean
example8_1
example8_1 - t(y_group_mean)
t(example8_1) - (y_group_mean)
t(y_group_mean)
y_group_mean
SSE = sum( (t(example8_1) - (y_group_mean) )^2 )
SSE
summary(model_1w)
MSE = SSE / ( ncol(example8_1)*nrow(example8_1) - ncol(example8_1))
MSE
F = MSA / MSE
F
pf
p = 1 - pf(F, ncol(example8_1) - 1,  ncol(example8_1)*nrow(example8_1) - ncol(example8_1))
p
library(DescTools)
model_1w = aov(产量~品种)
EtaSq(model_1w, anova=T)
library(agricolae)
install.packages("agricolae")
library(agricolae)
LSD = LSD.test(model_1w,"品种")
LSD
?LSD.teest
?LSD.test
#  将表8-1的短格式数据转为长格式数据，并显示前6列
example8_1 = read.csv("/USers/ben/desktop/stat/example/chap08/example8_1.csv", fileEncoding = "GBK")
library(reshape2)
example8_2 = melt(example8_1,variable.name="品种",value.name="产量")
# 方差分析表
attach(example8_2)
model_1w = aov(产量~品种)
summary(model_1w)
# 模型的参数估计
model_1w$coefficients
# 手动计算
y_mean = mean(as.matrix(example8_1))
y_group_mean = apply(example8_1, 2, mean)
n = ncol(example8_1)*nrow(example8_1)
I = ncol(example8_1)
SSA = sum( nrow(example8_1)* (y_group_mean - y_mean)^2 )
MSA = SSA/(I - 1)
SSE = sum( (t(example8_1) - (y_group_mean) )^2 )
MSE = SSE / ( n - I )
F = MSA / MSE
SSA
MSA
SSE
MSE
F
p = 1 - pf(F, ncol(example8_1) - 1,  ncol(example8_1)*nrow(example8_1) - ncol(example8_1))
p
qt(0.05/2, n-i)
qt(0.05/2, n-I)
#  将表8-1的短格式数据转为长格式数据，并显示前6列
example8_1 = read.csv("/USers/ben/desktop/stat/example/chap08/example8_1.csv", fileEncoding = "GBK")
library(reshape2)
example8_2 = melt(example8_1,variable.name="品种",value.name="产量")
# 方差分析表
attach(example8_2)
model_1w = aov(产量~品种)
summary(model_1w)
# 模型的参数估计
model_1w$coefficients
# 手动计算
y_mean = mean(as.matrix(example8_1))
y_group_mean = apply(example8_1, 2, mean)
n = ncol(example8_1)*nrow(example8_1)
I = ncol(example8_1)
n_g = nrow(example8_1)
SSA = sum( n_g* (y_group_mean - y_mean)^2 )
MSA = SSA/(I - 1)
SSE = sum( (t(example8_1) - (y_group_mean) )^2 )
MSE = SSE / ( n - I )
F = MSA / MSE
SSA
MSA
SSE
MSE
F
p = 1 - pf(F, ncol(example8_1) - 1,  ncol(example8_1)*nrow(example8_1) - ncol(example8_1))
p
qt(0.05/2, n-I, lower.tail = FALSE) * sqrt(MSE * (1/n_g+1/n_g))
t
t= qt(0.05/2, n-I, lower.tail = FALSE)
t
t_12 = (y_group_mean[1] - y_group_mean[2]) / sqrt(MSE * (1/n_g+1/n_g))
t_12
1 - pt(t_12, n-I)
p = 2*(1 - pt(t_12, n-I))
p
t_13 = (y_group_mean[1] - y_group_mean[3]) / sqrt(MSE * (1/n_g+1/n_g))
p = 2*(1 - pt(t_13, n-I))
p
t_23 = (y_group_mean[2] - y_group_mean[3]) / sqrt(MSE * (1/n_g+1/n_g))
p = 2*(1 - pt(t_23, n-I))
p
t_23 = (y_group_mean[2] - y_group_mean[3]) / sqrt(MSE * (1/n_g+1/n_g))
p = 2*(1 - pt(abs(t_23), n-I))
p
t_12 = (y_group_mean[1] - y_group_mean[2]) / sqrt(MSE * (1/n_g+1/n_g))
p = 2*(1 - pt(abs(t_12), n-I))
p
t_13 = (y_group_mean[1] - y_group_mean[3]) / sqrt(MSE * (1/n_g+1/n_g))
p = 2*(1 - pt(abs(t_13), n-I))
p
t_23 = (y_group_mean[2] - y_group_mean[3]) / sqrt(MSE * (1/n_g+1/n_g))
p = 2*(1 - pt(abs(t_23), n-I))
p
library(DescTools)
PostHocTest(model_1w,method="lsd")
TukeyHSD(model_1w)
TukeyHSD
?TukeyHSD
library(agricolae)
HSD = HSD.test(model_1w,"品种")
HSD
pnorm(1.5)
pnorm(1.67)
pnorm(1.66)
pnorm(1.65)
pnorm(1.64)
pnorm(1.65)
pnorm(1.6)
